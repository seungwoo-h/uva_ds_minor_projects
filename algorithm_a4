{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Authors\n",
    "- Jinhyun KIM (11968850)\n",
    "- Seung Woo HONG (10879420)\n",
    "\n",
    "### TA\n",
    "- Thanos Efthymiou"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Algorithms and Data Structures in Python --- Assignment IV ##\n",
    "\n",
    "The following assignment will test your understanding of topics covered in the first five weeks of the course. This assignment **will count towards your grade** and should be submitted through Canvas by **12.10.2020 at 08:59 (CEST)**. You can choose to work individually or in pairs. You can get at most **10 points for Assignment IV**, which is 10\\% of your final grade. \n",
    "\n",
    "- To test the code we will use Anaconda Python 3.7. Please state the names and student ids of the authors (at most two) at the top of the submitted fi\f",
    "le.\n",
    "\n",
    "- For submission, you should submit a Jupyter Notebook (*.ipynb) file. Please rename your notebook filename and add the name of you assigned TA as ```assignment4_{first_student_name}_{second_student_name}_{ta_name}.ipynb```. For example, your submission filename could look like ```assignment4_fiststudentname_secondstudentname_ujjwal.ipynb``` or ```assignment4_fiststudentname_secondstudentname_thanos.ipynb```. Please use \"ujjwal\" or \"thanos\" and not our fullnames. Additionally, also put the name of your TA inside the notebook as a comment. If you plan on working alone, please name the file as ```assignment4_{student_name}_{ta_name}.ipynb```\n",
    "\n",
    "- Please follow the function prototype specifi\f",
    "ed in the question for writing your code. The usage of additional functions is acceptable except when the problem expressly prohibits it.\n",
    "\n",
    "- **Important note:** For each exercise the correct solution counts for the 80% of the exercise's points, while code style counts for the remaining 20%. Please, make sure that you explain what your implementation does using comments.\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Password Manager (7.5 points) ##\n",
    "\n",
    "In this exercise you will use classes to provide core functionality for a Password Manager. A Password Manager is a computer program that allows users to store, generate, and manage their personal passwords for online services. To build this program, you are asked to implement two classes:\n",
    "\n",
    "1. Record\n",
    "2. PasswordManager\n",
    "\n",
    "### Record Class (1 point) ###\n",
    "\n",
    "The ```Record``` class stores an indvidual record that contains information pertaining to a single website. This information includes the sitename (e.g. \"twitter.com\"), username (e.g. \"janedoe\") and password (e.g. \"happycat123\"). Every instance of ```Record``` holds credentials for a *single* login. A prototype of the class is provided below:\n",
    "\n",
    "```python\n",
    "class Record(object):\n",
    "  \"\"\"\n",
    "  The methods below are mandatory. All other methods are optional.\n",
    "  \"\"\"\n",
    "  def __init__(self, site, username, password):\n",
    "    # init operations here.\n",
    "    # Mandatory. Must exist.\n",
    "    \n",
    "  def __str__(self):\n",
    "    # Mandatory. Must exist.\n",
    "    \n",
    "```\n",
    "In the ```Record``` class, the ```__init__``` and ```__str__``` methods must exist. All other methods are optional and may be used as per your convenience. \n",
    "\n",
    "### PasswordManager Class (6.5 points) ###\n",
    "\n",
    "The ```PasswordManager``` class manages the generation, storage and retrieval of individual password records stored in multiple ```Record``` instances. A prototype for this class is provided below:\n",
    "\n",
    "```python\n",
    "class PasswordManager(object):\n",
    "    \"\"\"\n",
    "    The methods below are mandatory. All other methods are optional.\n",
    "    \"\"\"\n",
    "    def __init__(self, key, password_len, alphabet):\n",
    "      raise NotImplementedError()\n",
    "\n",
    "    def __str__(self):\n",
    "      raise NotImplementedError()\n",
    "\n",
    "    def __reauthenticate(self):\n",
    "      raise NotImplementedError()\n",
    "\n",
    "    def set_password(self, site, username, password=None):\n",
    "      raise NotImplementedError()\n",
    "\n",
    "    def get_password(self, site, username):\n",
    "      raise NotImplementedError()\n",
    " \n",
    "    def __generate_password(self):\n",
    "      raise NotImplementedError()\n",
    "        \n",
    "    def __encrypt_password(self, plaintext_password):\n",
    "      raise NotImplementedError()\n",
    "       \n",
    "    def __decrypt_password(self, ciphertext_password):\n",
    "      raise NotImplementedError()\n",
    "\n",
    "    def __visualize(self, plaintext, ciphertext):\n",
    "      raise NotImplementedError()\n",
    "```\n",
    "\n",
    "We discuss these methods one-by-one:\n",
    "\n",
    "1. The ```__init__``` method is used to setup the Password Manager. On initialization, it accepts the following parameters:\n",
    "\n",
    "    1. An integer ```key``` that is used for password encryption. Usage of this variable will be explained in the section on Encryption.\n",
    "    2. An integer ```password_len``` that specifies the length of new random passwords, in case the user requests one. \n",
    "    3. ```alphabet``` is a list of characters that are used for passwords. You can obtain the entire lowercase alphabet using the ```string.ascii_lowercase``` functionality in the ```string``` library.\n",
    "\n",
    "-----\n",
    "\n",
    "2. The ```__str__``` method provides a string representation for the PasswordManager object. You can put relevant information in it. For an instance with two records, the method could display ```\"PasswordManager with 2 records stored\"```. This is just an example, feel free to use any string of your choice.\n",
    "\n",
    "-----\n",
    "\n",
    "3. ```__reauthenticate``` asks the user to enter their key before setting or retrieving a password. If a wrong key is provided during this step, the user is not allowed to proceed further.\n",
    "\n",
    "-----\n",
    "\n",
    "4. ```set_password(self, site, username, password)``` creates a record for a given site, username and password. To achieve this, it creates an instance of ```Record``` class with the specified site, username and password. This can be done in the following steps:\n",
    "\n",
    "    1. Re-authenticate the user using ```__reauthenticate```. Proceed to the next step if authentication succeeds.\n",
    "\n",
    "    2. You will be provided a site and username in the function call. *site* and *username* must always be provided to this function whereas the argument *password* is optional. If a password is provided within the function call, set_password uses the supplied password. If a password is not provided, set_password uses the function ```__generate_password()``` to create a random password.\n",
    "\n",
    "    3. Passwords must always be encrypted prior to their storage in a Record object. Once the password is generated, call ```__encrypt_password(plaintext_password)``` to encrypt your password with the key provided in the ```__init__```. Please read the section on Encryption to see how to encrypt your password.\n",
    "   \n",
    "    4. In the final step, create a ```Record``` instance with the site, username and **encrypted password**. Please ensure that only the **encrypted password** is stored in a Record object. Once a Record object has been created, save it within the PasswordManager in a class variable called ```record_list```.\n",
    "   \n",
    "-----\n",
    "   \n",
    "5. ```get_password(self, site, username)``` retrieves the password for a given site and username. It does this by retrieving the Record object containing information for the specified site and username combination. This can be done in the following steps:\n",
    "\n",
    "    1. Re-authenticate the user using ```__reauthenticate```. Proceed to the next step if authentication succeeds.\n",
    "\n",
    "    2. Iterate over your ```record_list``` and retrieve the ```Record``` object corresponding to the desired site and username combination. This record will contain the desired site, username and encrypted password.\n",
    "\n",
    "    3. Since passwords are encrypted before being put into Record objects, you will need to decrypt the password in the retrieved Record object. Use the ```__decrypt_password(ciphertext_password)``` functionality to reverse the encryption process and retrieve the decrypted password. \n",
    "    \n",
    "    4. Display the credentials to the user. \n",
    "\n",
    "----- \n",
    "\n",
    "6. ```__generate_password()```  creates a random password by randomly sampling ```password_len``` characters from the ```alphabet``` list (specified earlier). For example, if password_len = 3 and alphabet = ['a', 'b', 'c', 'd', 'e'], the function will randomly sample three characters from the alphabet list and join them to make a new random password. The ```random``` library in Python may be helpful for this task.\n",
    "\n",
    "\n",
    "NOTE : In cryptography, **plaintext** usually means unencrypted information that is pending encryption. In your case, this is the user-supplied or randomly generated password prior to the encryption step. **Ciphertext** is the text resulting from the encryption of the plaintext."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Encryption - Decryption (2.5 points) ##\n",
    "\n",
    "Now that you have implemented the backbone of the Password Mananger, you will work with encryption and decryption methods, and in particularly you are asked to implement one of the most simplest and widely-known encryption techniques **Caesar cipher**. \n",
    "\n",
    "![Example Image](caesar.png)\n",
    "> -- Example image is taken from <cite>https://ijoshsmith.com/2015/04/14/caesar-cipher-in-swift/</cite>\n",
    "\n",
    "Caesar cipher, named after Julius Caesar, is one of the oldest cryptography techniques. More specifically, it is a simple process of transforming a plaintext to an encrypted message as follows:\n",
    "\n",
    "- Given a plaintext, i.e. 'abcd', a known key, i.e. 2, and an alphabet, i.e. 'abcdefghijklmnopqrstuvwxyz'.\n",
    "\n",
    "\n",
    "- Encrypt the plaintext by replacing each character in the plaintext following a right (or left if specified) shift of the known key. As an example, assume a given string *'abcde'* and a known key *2*. Caesar cipher will replace each character in the plaintext following a right shift of two and return *'cdefg'*.\n",
    "\n",
    "\n",
    "- Decryption of the encrypted text, \"ciphertext\" if you will, is the reverse process. As an example, assume a given string *'cdefg'* and a known key *2*. Caesar cipher will replace each character in the ciphertext following a left shift of two and return *'abcde'*.\n",
    "\n",
    "A visualized version of the aforementioned procedure can be seen in the example image above.\n",
    "\n",
    "\n",
    "You can find a more detailed description and additional information regarding Caesar cipher in the following Wikipedia entry <https://en.wikipedia.org/wiki/Caesar_cipher>."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Password encryption ###\n",
    "\n",
    "Now that you are introduced to Caesar cipher you are asked to implement a private, \"inner\" if you will, ```__encrypt_password``` function.\n",
    "\n",
    "The ```__encrypt_password(self, plaintext_password)``` function requires only a plaintext string. By using the initialized ```self.__key``` the ```__encrypt_password``` should return the encrypted, transformed, version of the plaintext by *right* shifting *key* times each character of the plaintext using the initialized alphabet characters ```self.__alphabet```. As an example, if the key is ```self._key=1234```, the plaintext is ```plaintext_password=\"abcde\"``` and the alphabet is ```\"abcdefghijklmnopqrstuvwxyz\"```the encryption function should return the encrypted message *'mnopq'*.\n",
    "\n",
    "You should use the following formula to encrypt the plaintext:\n",
    "\n",
    "$$E_k (c) = (c+k) \\% len(alphabet)\\text{, where}$$ $c$ is the character to be encrypted, $k$ is the key and $alphabet$ is the valid characters allowed. $E$ stands for encoding. You are allowed to hand-code the $len(alphabet)=26$, as there are 26 lowercase ASCII alphabetic characters. \n",
    "\n",
    "For this exercise, you should assume that only lowercase ASCII alphabetic characters are allowed. You can get this characters by simply doing the following:\n",
    "\n",
    "```py\n",
    "import string\n",
    "alphabet = string.ascii_lowercase\n",
    "print(alphabet)\n",
    "abcdefghijklmnopqrstuvwxyz\n",
    "```\n",
    "\n",
    "Please, note that for this exercise, you can assume that you can encrypt plaintext by using *right* shifting.\n",
    "For decryption you should use the reverse *left* shifting.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Password decryption ###\n",
    "\n",
    "Now that you have implemented the encrypted part of the Caesar cipher you are asked to implement a private, \"inner\" if you will, ```__decrypt_password``` function.\n",
    "\n",
    "The ```__decrypt_password(self, ciphertext_password)``` function requires only an encrypted \"ciphertext\" string. By using the initialized ```self.__key``` the ```__decrypt_password``` should return the decrypted, transformed, version of the ciphertext by *left* shifting *key* times each character of the ciphertext using the initialized alphabet characters ```self.__alphabet```. As an example, if the key is ```self._key=1234```, the plaintext is ```plaintext_password=\"mnopq\"``` and the alphabet is ```\"abcdefghijklmnopqrstuvwxyz\"```the decryption function should return the decrypted message *'abcde'*.\n",
    "\n",
    "You should use the following formula to decrypt the plaintext:\n",
    "\n",
    "$$D_k (c) = (c-k) \\% len(alphabet)\\text{, where}$$ $c$ is the character to be decrypted, $k$ is the key and $alphabet$ is the valid characters allowed. $D$ stands for decoding. You are allowed to hand-code the $len(alphabet)=26$, as there are 26 lowercase ASCII alphabetic characters. \n",
    "\n",
    "As in password encryption, you should assume that only lowercase alphabetic characters are allowed.\n",
    "\n",
    "\n",
    "Please, note that for this exercise, you can assume that you can decrypt plaintext by using *left* shifting.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualize encryption-decryption procedure ###\n",
    "\n",
    "Now that you have implemented the complete version of the Caesar cipher method you are asked to implement a ```__visualize``` function.\n",
    "\n",
    "The ```__visualize(self, plaintext, ciphertext)``` function requires plaintext and the encrypted ciphertext strings. Given a plaintext, i.e. *'abced'* and a ciphertext, i.e. *'mnopq'*, the class ```PasswordManager``` can use the ```__visualize``` function to visualize the transformation of each character in plaintext to the corresponding ciphertext character as follows:\n",
    "\n",
    "```py\n",
    "a b c d e \n",
    "\n",
    "| | | | | \n",
    "\n",
    "m n o p q \n",
    "```\n",
    "\n",
    "You should implement the ```__visualize``` function to print the plaintext, ciphertext and '|' symbol formatted as the above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Points Distribution ###\n",
    "\n",
    "\n",
    "|                                  Component                                 | Points |\n",
    "|:--------------------------------------------------------------------------:|:------:|\n",
    "| Records Class                                                              | 1      |\n",
    "| PasswordManager : ```__init__```, ```__str__``` and ```__reauthenticate``` | 1.5    |\n",
    "| ```set_password```                                                         | 2      |\n",
    "| ```get_password```                                                         | 2      |\n",
    "| ```__generate_password```                                                  | 1      |\n",
    "| ```__encrypt_password```                                                   | 1      |\n",
    "| ```__decrypt_password```                                                   | 1      |\n",
    "| ```__visualize```                                                          | 0.5    |\n",
    "\n",
    "<center>* 20% of points are for code style and quality."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Record(object):\n",
    "    def __init__(self, site, username, password):\n",
    "        self.site = site\n",
    "        self.username = username\n",
    "        self.password = password\n",
    "        \n",
    "    def __str__(self):\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "import string\n",
    "import random\n",
    "\n",
    "class PasswordManager(object):\n",
    "    def __init__(self, key, password_len, alphabet=string.ascii_lowercase):\n",
    "        try:\n",
    "            if type(key) != int:\n",
    "                raise Exception(\"Only integer is allowed for a key\")\n",
    "            self.__key = key    # integer\n",
    "            if type(password_len) != int:\n",
    "                raise Exception(\"Only integer is allowed for a password length\")\n",
    "            if password_len < 1:\n",
    "                raise Exception(\"Password length must be at least 1\")\n",
    "            self.password_len = password_len    # integer\n",
    "            # In case user entered duplicate alphabets\n",
    "            for i in alphabet:\n",
    "                if i not in string.ascii_lowercase:\n",
    "                    raise Exception(\"Password should consist of alphabet\")\n",
    "            if alphabet != string.ascii_lowercase:\n",
    "                alphabet = ''.join(sorted(list(set(alphabet))))\n",
    "                print(\"Duplicate alphabets in the string entered by the user were removed and sorted alphabetically.\")\n",
    "                print(\"Your alphabets: \", alphabet)\n",
    "            elif alphabet == string.ascii_lowercase:\n",
    "                print(\"Lower alphabet a-z will be used to generate password and encryption\")\n",
    "                print(\"Your alphabets: \", alphabet)\n",
    "            self.alphabet = [i for i in alphabet]    # list\n",
    "            self.__record_list = [] # Record list to store data\n",
    "        except Exception as e:\n",
    "            print(\"Error - \", e)\n",
    "            \n",
    "    def __str__(self):\n",
    "        return \"PasswordManager with {} records stored\".format(len(self.__record_list))\n",
    "    \n",
    "    def __reauthenticate(self):\n",
    "        try:\n",
    "            user_key = input(\"Enter key: \")\n",
    "            # To check if the key is in a correct format\n",
    "            for c in user_key:\n",
    "                if not c.isdigit():\n",
    "                    raise Exception(\"Only integer is allowed for a key\")\n",
    "            user_key = int(user_key)\n",
    "            # Validating key\n",
    "            if user_key == self.__key:\n",
    "                return True\n",
    "            else:\n",
    "                return False\n",
    "        except Exception as e:\n",
    "            print(\"Error - \", e)\n",
    "\n",
    "    def set_password(self, site, username, password=None):\n",
    "        try:\n",
    "            if not self.__reauthenticate():\n",
    "                raise Exception(\"Wrong key\")\n",
    "            \n",
    "            while True:\n",
    "                if password != None:\n",
    "                    if set(password) != set(self.alphabet).intersection(set(password)):\n",
    "                        print(\"Your password includes a letter that is not in your alphabet list\")\n",
    "                        print(\"Your alphabet list: \", ''.join(set(self.alphabet)))\n",
    "                        # user can choose to enter new password or generate automatically\n",
    "                        response = input(\"Enter new password or type; !RANDOM to generate random password\")\n",
    "                        # if user want to generate random password automatically, return none to proceed to self.__generate_password()\n",
    "                        if response == \"!RANDOM\":\n",
    "                            password = None\n",
    "                            break\n",
    "                        else:\n",
    "                            password = response\n",
    "                            continue\n",
    "                    # if new password is valid, break the loop\n",
    "                    else:\n",
    "                        break\n",
    "                else:\n",
    "                    break\n",
    "                    \n",
    "            # Generate password if no password is given\n",
    "            if password == None:\n",
    "                print(\"{} letter(s) password will be generated automatically\".format(self.password_len))\n",
    "                # Password generate\n",
    "                password = self.__generate_password()\n",
    "                \n",
    "            # Password encryption\n",
    "            enc_password = self.__encrypt_password(password)\n",
    "            \n",
    "            # Password record\n",
    "            class_record = Record(site, username, enc_password)\n",
    "            \n",
    "            # update new password for same username in a same website\n",
    "            self.__record_list.append([class_record.site, class_record.username, class_record.password])\n",
    "            update_record_list = []    # Temporary list for update\n",
    "            # Check if there is data to update\n",
    "            for v in self.__record_list:\n",
    "                if (v[0] == class_record.site) and (v[1] == class_record.username):\n",
    "                    v[2] = class_record.password\n",
    "                if v not in update_record_list:\n",
    "                    update_record_list.append(v)\n",
    "                    \n",
    "            # Update data        \n",
    "            self.__record_list = update_record_list\n",
    "            del update_record_list\n",
    "            self.__visualize(password, enc_password)\n",
    "            print(\"Stored data: \", self.__record_list)\n",
    "        except Exception as e:\n",
    "            print(\"Error - \", e)\n",
    "    \n",
    "    def get_password(self, site, username):\n",
    "        # Key validation\n",
    "        try:\n",
    "            if not self.__reauthenticate():\n",
    "                raise Exception(\"Wrong key\")\n",
    "            # Finding password for a given username and a website\n",
    "            for v in self.__record_list:\n",
    "                if (v[0] == site) and (v[1] == username):\n",
    "                    # Decrypt\n",
    "                    d_password = self.__decrypt_password(v[2])\n",
    "                    return d_password\n",
    "        except Exception as e:\n",
    "            print(\"Error - \", e)\n",
    "    \n",
    "    def __generate_password(self):\n",
    "        # Password generate\n",
    "        gen_password = \"\"\n",
    "        for i in range(self.password_len):\n",
    "            # each letter will be choosen from the alphabet list defined above and iterates 'password_len' times to create random password\n",
    "            gen_password += random.choice(self.alphabet)\n",
    "        print(\"Generated password: \", gen_password)\n",
    "        return gen_password\n",
    "    \n",
    "    def __encrypt_password(self, plaintext_password):\n",
    "        encrypted_password = \"\"\n",
    "        # Caesar encryption\n",
    "        for i in plaintext_password:\n",
    "            ec = self.alphabet[(self.alphabet.index(i) + self.__key) % len(self.alphabet)]\n",
    "            encrypted_password += ec\n",
    "        print(\"Encrypted password: \", encrypted_password)\n",
    "        return encrypted_password\n",
    "            \n",
    "    def __decrypt_password(self, ciphertext_password):\n",
    "        decrypted_password = \"\"\n",
    "        # Decryption based on Casesar cipher method\n",
    "        for i in ciphertext_password:\n",
    "            dc = self.alphabet[(self.alphabet.index(i) - self.__key) % len(self.alphabet)]\n",
    "            decrypted_password += dc\n",
    "        return decrypted_password\n",
    "        \n",
    "    def __visualize(self, plaintext, ciphertext):\n",
    "        print(plaintext.replace(\"\", \" \"))\n",
    "        print()\n",
    "        print(\"\\033[95m\"+(\"|\"*len(plaintext)).replace(\"\", \" \")+\"\\033[0m\") # color = purple\n",
    "        print()\n",
    "        print(ciphertext.replace(\"\", \" \"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error -  Only integer is allowed for a key\n",
      "Error -  Only integer is allowed for a password length\n",
      "Error -  Password length must be at least 1\n",
      "Error -  Password should consist of alphabet\n",
      "Error -  Password should consist of alphabet\n"
     ]
    }
   ],
   "source": [
    "# Testing with a wrong parameter format\n",
    "\n",
    "user_1 = PasswordManager(key=\"abcd\", password_len=1234)\n",
    "user_1 = PasswordManager(key=1234, password_len=\"abcd\")\n",
    "user_1 = PasswordManager(key=1234, password_len=0)\n",
    "user_1 = PasswordManager(key=1234, password_len=8, alphabet=\"123dsfafdas\")\n",
    "user_1 = PasswordManager(key=1234, password_len=8, alphabet=\"123\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Duplicate alphabets in the string entered by the user were removed and sorted alphabetically.\n",
      "Your alphabets:  adfs\n",
      "Lower alphabet a-z will be used to generate password and encryption\n",
      "Your alphabets:  abcdefghijklmnopqrstuvwxyz\n"
     ]
    }
   ],
   "source": [
    "# User defined alphabet\n",
    "user_1 = PasswordManager(key=1234, password_len=8, alphabet=\"adsfdsfafdas\")\n",
    "\n",
    "# Default alphabet parameter (a-z lowercase)\n",
    "user_1 = PasswordManager(key=1234, password_len=8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter key: 1234\n",
      "Encrypted password:  yuodaearf\n",
      " m i c r o s o f t \n",
      "\n",
      "\u001b[95m | | | | | | | | | \u001b[0m\n",
      "\n",
      " y u o d a e a r f \n",
      "Stored data:  [['Google.com', 'billgates1234', 'yuodaearf']]\n",
      "Enter key: 1234\n",
      "Encrypted password:  yuodaearf\n",
      " m i c r o s o f t \n",
      "\n",
      "\u001b[95m | | | | | | | | | \u001b[0m\n",
      "\n",
      " y u o d a e a r f \n",
      "Stored data:  [['Google.com', 'billgates1234', 'yuodaearf']]\n"
     ]
    }
   ],
   "source": [
    "# Record with user's password\n",
    "\n",
    "# Test with a wrong key\n",
    "user_1.set_password(site=\"Google.com\", username=\"billgates1234\", password=\"microsoft\")\n",
    "\n",
    "# Test with a valid key\n",
    "user_1.set_password(site=\"Google.com\", username=\"billgates1234\", password=\"microsoft\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Duplicate alphabets in the string entered by the user were removed and sorted alphabetically.\n",
      "Your alphabets:  abcdefg\n",
      "Enter key: 1234\n",
      "Your password includes a letter that is not in your alphabet list\n",
      "Your alphabet list:  agebdfc\n",
      "Enter new password or type; !RANDOM to generate random passwordagadg\n",
      "Encrypted password:  cbcfb\n",
      " a g a d g \n",
      "\n",
      "\u001b[95m | | | | | \u001b[0m\n",
      "\n",
      " c b c f b \n",
      "Stored data:  [['googl', 'dfkd', 'cbcfb']]\n"
     ]
    }
   ],
   "source": [
    "# Test with invalid password\n",
    "\n",
    "user_2 = PasswordManager(key=1234, password_len=8, alphabet=\"abcdefg\")\n",
    "user_2.set_password(\"googl\", \"dfkd\", \"zqrsxxva\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter key: 1234\n",
      "Encrypted password:  mbbxq\n",
      " a p p l e \n",
      "\n",
      "\u001b[95m | | | | | \u001b[0m\n",
      "\n",
      " m b b x q \n",
      "Stored data:  [['Google.com', 'billgates1234', 'mbbxq']]\n"
     ]
    }
   ],
   "source": [
    "# Update record of same username in a same website\n",
    "\n",
    "user_1.set_password(site=\"Google.com\", username=\"billgates1234\", password=\"apple\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter key: 1234\n",
      "8 letter(s) password will be generated automatically\n",
      "Generated password:  mwuviklt\n",
      "Encrypted password:  yighuwxf\n",
      " m w u v i k l t \n",
      "\n",
      "\u001b[95m | | | | | | | | \u001b[0m\n",
      "\n",
      " y i g h u w x f \n",
      "Stored data:  [['Google.com', 'billgates1234', 'mbbxq'], ['apple.com', 'stevejobs1', 'yighuwxf']]\n"
     ]
    }
   ],
   "source": [
    "# Add another record\n",
    "\n",
    "user_1.set_password(site=\"apple.com\", username=\"stevejobs1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter key: 1234\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'apple'"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get password\n",
    "\n",
    "user_1.get_password(site=\"Google.com\", username=\"billgates1234\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
