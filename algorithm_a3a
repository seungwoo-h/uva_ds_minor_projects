{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Authors\n",
    "- Jinhyun KIM (11968850)\n",
    "- Seung Woo HONG (10879420)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "qXRb042E9dZM"
   },
   "source": [
    "## Algorithms and Data Structures in Python --- Assignment III (Part One) ##\n",
    "\n",
    "The following assignment will test your understanding of topics covered in the first three weeks of the course. This assignment **will count towards your grade** and should be submitted through Canvas by **01.10.2020 at 08:59 (CEST)**. You can choose to work individually or in pairs. You can get at most **5 points for Assignment III (Part One)**, which is 5\\% of your final grade. \n",
    "\n",
    "- To test the code we will use Anaconda Python 3.7. Please state the names and student ids of the authors (at most two) at the top of the submitted fi\f",
    "le.\n",
    "\n",
    "- For submission, you should submit a Jupyter Notebook (*.ipynb) file. Please rename your notebook filename and add the name of you assigned TA as ```assignment3a_{first_student_name}_{second_student_name}_{ta_name}.ipynb```. For example, your submission fi\f",
    "lename could look like ```assignment3a_fiststudentname_secondstudentname_ujjwal.ipynb``` or ```assignment3a_fiststudentname_secondstudentname_thanos.ipynb```. Please use \"ujjwal\" or \"thanos\" and not our fullnames. Additionally, also put the name of your TA inside the notebook as a comment. If you plan on working alone, please name the file as ```assignment3a_{student_name}_{ta_name}.ipynb```\n",
    "\n",
    "- Do **not** externally modify the CSV data file accompanying this assignment.\n",
    "\n",
    "- For this assignment, the usage of ```pandas``` is **not** allowed. Usage of ```numpy``` is acceptable.\n",
    "\n",
    "- Please follow the function prototype specifi\f",
    "ed in the question for writing your code. It is perfectly acceptable to add additional functions if you need them but please keep the core structure specifi\f",
    "ed in the question intact.\n",
    "\n",
    "- **Important note:** For each exercise, the correct solution counts for the 80% of the excercise's points, while code style counts for the remaining 20%. Please make sure that you explain what your implementation does using comments.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "7AB9vlQKBpqE"
   },
   "source": [
    "### Working with Data ###\n",
    "\n",
    "As you begin to work on real-world problems, statistical figures and data will often be provided to you as panel data. Python can automate the cleaning and processing of this data with high speed and unmatched accuracy. In this homework, you will build small utilities to work with panel data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Opr96siXBvWZ"
   },
   "source": [
    "#### Problem 1 : Loading CSV Data #### \n",
    "\n",
    "Let's start with a simple problem and analyze the ```locations.csv``` file provided with homework. A comma-separated values (CSV) file is a text file that contains data 'delimited' by a character into separate values. When read by a program, these files can be easily converted into simple spreadsheets and can be read and edited by popular spreadsheet processing programs like Microsoft Excel or LibreOffice Calc. Since CSV files are simple to load and do not require specialized commercial software for usage, they are extremely popular as a data-distribution format.\n",
    "\n",
    "NOTE: When I talk about row numbers below, they start from 1 as you would generally see in spreadsheet software like Calc or Excel. Please do not forget that Python uses zero-based indexing (indices start from 0 instead of 1).\n",
    "\n",
    "In this exercise, you will use the ```csv``` library to load CSV files. The following excerpt from the Python documentation provides a brief overview of this library:\n",
    "\n",
    "```\n",
    "The csv module implements classes to read and write tabular data in CSV format. It allows programmers to say, “write this data in the format preferred by Excel,” or “read data from this file which was generated by Excel,” without knowing the precise details of the CSV format used by Excel.\n",
    "```\n",
    "\n",
    "For Problem 1, you will implement a function called ```load_data(filepath)``` that follows the instructions below:\n",
    "\n",
    "1.  Load data from the given CSV data file. You can use the following minimal code to achieve this:\n",
    "\n",
    "```python\n",
    "  raw_data = []\n",
    "  with open(filepath, 'r', encoding=\"utf8\") as rf:\n",
    "    reader = csv.reader(rf, delimiter = ',')\n",
    "    for row in reader:\n",
    "      raw_data.append(row)\n",
    "```\n",
    "\n",
    "2. Separate the headers (column titles) and data into lists ```headers``` and ```data```. Headers is a single list of the first row as shown below and data contains everything from row 2 onwards. \n",
    "\n",
    "    ```python\n",
    "    headers = ['geoname_id', 'continent_code', 'continent_name' 'country_iso_code', 'country_name', 'subdivision_iso_code', 'subdivision_name' 'city_name', 'metro_code', 'time_zone']\n",
    "    ```\n",
    "\n",
    "    ```python\n",
    "     data =   [ ['1861060', 'AS', 'Asia', 'JP', 'Japan', '', '', '', '', 'Asia/Tokyo'],\n",
    "                ['1809858', 'AS', 'Asia', 'CN', 'China', '44', 'Guangdong', 'Guangzhou', '', 'Asia/Shanghai'],\n",
    "                ['1850147', 'AS', 'Asia', 'JP', 'Japan', '13', 'Tōkyō', 'Tokyo', '', 'Asia/Tokyo'],\n",
    "                ['1814991', 'AS', 'Asia', 'CN', 'China', '', '', '', '', ''],\n",
    "                ['2077456', 'OC', 'Oceania', 'AU', 'Australia', '', '', '', '', ''],\n",
    "               ...\n",
    "               ...\n",
    "               ...\n",
    "               ['9999999', 'AS', 'Asia', 'SY', 'Syria', 'AG', 'Aleppo Governate', 'Aleppo', '', 'Asia/Aleppo'],\n",
    "               ['9999999', 'AS', 'Asia', 'SY', 'Syria', 'HG', 'Homs Governate', 'Homs', '', 'Asia/Homs'],\n",
    "               ['9999999', 'AS', 'Asia', 'SY', 'Syria', 'DG', 'Daraa Governate', 'Dara', '', 'Asia/Homs'],\n",
    "               ['9999999', 'AS', 'Asia', 'SY', 'Syria', 'HG', 'Homs Governate', 'Talkalakh', '', 'Asia/Homs'],\n",
    "               ['9999999', 'AS', 'Asia', 'SY', 'Syria', 'ID', 'Idlib Governate', 'Idlib', '', 'Asia/Homs']]\n",
    "      ```\n",
    "\n",
    "4. Return ```headers, data``` when ```load_data()``` is called."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "LgHRTCKfHBXM"
   },
   "outputs": [],
   "source": [
    "# Exercise 1\n",
    "\n",
    "import csv\n",
    "\n",
    "def load_data(filepath):\n",
    "    # Load data from the given CSV data file\n",
    "    with open(filepath, 'r', encoding='utf8') as rf:\n",
    "        reader = csv.reader(rf, delimiter = ',')\n",
    "        raw_data = [line for line in reader]\n",
    "    # Separate the headers (column titles) and data into lists\n",
    "    headers = raw_data[0]\n",
    "    data = raw_data[1:]\n",
    "    return headers, data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "qoU9OHpNHK1d",
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "headers, data = load_data('locations.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['geoname_id', 'continent_code', 'continent_name', 'country_iso_code', 'country_name', 'subdivision_iso_code', 'subdivision_name', 'city_name', 'metro_code', 'time_zone']\n"
     ]
    }
   ],
   "source": [
    "print(headers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "IOPub data rate exceeded.\n",
      "The notebook server will temporarily stop sending output\n",
      "to the client in order to avoid crashing it.\n",
      "To change this limit, set the config variable\n",
      "`--NotebookApp.iopub_data_rate_limit`.\n",
      "\n",
      "Current values:\n",
      "NotebookApp.iopub_data_rate_limit=1000000.0 (bytes/sec)\n",
      "NotebookApp.rate_limit_window=3.0 (secs)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "qSY71hqRHtBy"
   },
   "source": [
    "#### Problem 2  : Extract Rows and Columns (3 points) ####\n",
    "\n",
    "Once we have the data loaded, we might need to access the data in certain ways. For example, a user might want to extract all the values for a particular continent. In this problem, we will write code to extract a complete row or column from the data.\n",
    "\n",
    "#### Excercise 2.1 (1 point) ####\n",
    "\n",
    "You are asked to implement a function ```extract_axis```. Your function ```extract_axis(table, request)``` should provide the following functionality:\n",
    "\n",
    "1. Accept a data ```table``` (a list of rows provided by the functionality above) and a tuple ```request``` that contains two items ```axis``` and ```index```. ```axis``` should specify if a row is to be extracted or a column. ```index``` should specify which column or row needs to be extracted.\n",
    "\n",
    "2. Return the fetched row or column as a list.\n",
    "\n",
    "---\n",
    "\n",
    "```python \n",
    "request = ('col', '2') # I want the 3rd column (index starts at 0)\n",
    "extract_axis(data, request)\n",
    "```\n",
    "\n",
    "    \n",
    "should return \n",
    "\n",
    "\n",
    "```python\n",
    ">> ['Asia',\n",
    " 'Asia',\n",
    " 'Asia',\n",
    " 'Asia',\n",
    " 'Oceania',\n",
    " 'Oceania',\n",
    " ...,\n",
    " ...,\n",
    " ...,\n",
    " 'Asia',\n",
    " 'Asia',\n",
    " 'Asia',\n",
    " 'Asia',\n",
    " 'Asia']\n",
    "\n",
    "```\n",
    "\n",
    "---\n",
    "\n",
    "```python\n",
    "request = ('row', 4858)\n",
    "extract_axis(data, request)\n",
    "```\n",
    "\n",
    "should return,\n",
    "```python\n",
    ">> ['4834157', 'NA', 'North America', 'US', 'United States', 'CT', 'Connecticut', 'Fairfield', '501', 'America/New_York']\n",
    "```        \n",
    "\n",
    "An invalid request, like asking for the 20th column (which does not exist) or the 80,000th row should return an empty list.\n",
    "\n",
    "\n",
    "#### Excercise 2.2 (2 point) ####\n",
    "You are asked to implement a function ```extract_subset```. Your function ```extract_subset(table, request)``` should perform the following steps:\n",
    "\n",
    "1. Accept a data ```table``` (a list of rows provided by the functionality above) and a dictionary ```request```. Unlike the previous problem, request is a dictionary and can contain multiple conditions to filter on. Each key-value pair within the request dict specifies a restriction applied on the rows in the data to be returned. For example, the request:\n",
    "\n",
    "```python \n",
    "{'country_name': 'Netherlands', 'city_name': 'Monnickendam'}\n",
    "```\n",
    "\n",
    "should return rows where ```country_name``` is ```Netherlands``` and ```city_name``` is ```Monnickendam```. The sole entry that matches this is below:\n",
    "\n",
    "```python\n",
    "[['2750641',\n",
    "  'EU',\n",
    "  'Europe',\n",
    "  'NL',\n",
    "  'Netherlands',\n",
    "  'NH',\n",
    "  'North Holland',\n",
    "  'Monnickendam',\n",
    "  '',\n",
    "  'Europe/Amsterdam']]\n",
    "```\n",
    "\n",
    "A request can also ask for multiple values to be returned. This is done by putting multiple values into a list:\n",
    "\n",
    "```python\n",
    "{'country_name': 'Netherlands', 'city_name': ['Monnickendam', 'Amsterdam']}\n",
    "```\n",
    "\n",
    "returns:\n",
    "\n",
    "```python\n",
    "[['2759794',\n",
    "  'EU',\n",
    "  'Europe',\n",
    "  'NL',\n",
    "  'Netherlands',\n",
    "  'NH',\n",
    "  'North Holland',\n",
    "  'Amsterdam',\n",
    "  '',\n",
    "  'Europe/Amsterdam'],\n",
    " ['2750641',\n",
    "  'EU',\n",
    "  'Europe',\n",
    "  'NL',\n",
    "  'Netherlands',\n",
    "  'NH',\n",
    "  'North Holland',\n",
    "  'Monnickendam',\n",
    "  '',\n",
    "  'Europe/Amsterdam']]\n",
    "```\n",
    "\n",
    "2. If nothing matches the search request, return an empty list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exercise 2.1\n",
    "\n",
    "def extract_axis(data, request):\n",
    "    # Columns\n",
    "    if request[0] == 'col':\n",
    "        colist = []\n",
    "        # Fetching from a column\n",
    "        try:\n",
    "            colist = [i[int(request[1])] for i in data]\n",
    "            return colist\n",
    "        # for empty list if the column is out of range\n",
    "        except:\n",
    "            return colist\n",
    "    # Row\n",
    "    elif request[0] == 'row':\n",
    "        rowlist = []\n",
    "        # Fetching from a row\n",
    "        try:\n",
    "            rowlist.append(data[int(request[1])])\n",
    "            return rowlist\n",
    "        # for empy list if the row is out of range\n",
    "        except:\n",
    "            return rowlist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Asia', 'Asia', 'Asia', 'Asia', 'Oceania', 'Oceania', 'Asia', 'Asia', 'Asia', 'Asia']\n",
      "[['4834157', 'NA', 'North America', 'US', 'United States', 'CT', 'Connecticut', 'Fairfield', '501', 'America/New_York']]\n",
      "[]\n"
     ]
    }
   ],
   "source": [
    "request = ('col', '2')\n",
    "print(extract_axis(data, request)[:10])\n",
    "\n",
    "request = ('row', 4858)\n",
    "print(extract_axis(data, request))\n",
    "\n",
    "request = ('col', '20')\n",
    "print(extract_axis(data, request))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exercise 2.2\n",
    "\n",
    "def extract_subset(table, request):\n",
    "    # iterates the request\n",
    "    for key, value in request.items():\n",
    "        # list comprehension\n",
    "        val_list = [i for i in table if (i[headers.index(key)] in value) and (i[headers.index(key)] != '')]\n",
    "        # update data for next loop\n",
    "        table = val_list.copy()\n",
    "    return table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[['2750641', 'EU', 'Europe', 'NL', 'Netherlands', 'NH', 'North Holland', 'Monnickendam', '', 'Europe/Amsterdam']] \n",
      "\n",
      "[['2759794', 'EU', 'Europe', 'NL', 'Netherlands', 'NH', 'North Holland', 'Amsterdam', '', 'Europe/Amsterdam'], ['2750641', 'EU', 'Europe', 'NL', 'Netherlands', 'NH', 'North Holland', 'Monnickendam', '', 'Europe/Amsterdam']]\n",
      "[['2759794', 'EU', 'Europe', 'NL', 'Netherlands', 'NH', 'North Holland', 'Amsterdam', '', 'Europe/Amsterdam']]\n"
     ]
    }
   ],
   "source": [
    "request = {'country_name': 'Netherlands', 'city_name': 'Monnickendam'}\n",
    "print(extract_subset(data, request), \"\\n\")\n",
    "\n",
    "request = {'country_name': 'Netherlands', 'city_name': ['Monnickendam', 'Amsterdam']}\n",
    "print(extract_subset(data, request))\n",
    "\n",
    "request = {'continent_name': 'Europe', 'country_name': 'Netherlands', 'city_name': 'Amsterdam'}\n",
    "print(extract_subset(data, request))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "CGWiGcFeY_eo"
   },
   "source": [
    "#### Problem 3  : Interactive Helper (2 points) ####\n",
    "\n",
    "In this problem, you're asked to design an interactive helper to help people find cities. The core idea is to use the functionality created above to help users find information on the table. You are asked to implement a function ```search``` that accepts no inputs. Inside this function, the following steps need to be executed:\n",
    "\n",
    "1. Begin the search process by asking the user to provide a continent name. If the user provides a valid input (a legitimate continent name), move to step 2. If they provide an invalid input, repeat this step and ask them to enter a valid continent name again.\n",
    "\n",
    "2. Given a valid continent name has been provided (an actual continent in the ```continent_name``` column), use the ```extract_subset``` functionality to obtain a pruned, smaller set of rows where ```continent_name == user input for continent```. Print the names of countries in this filtered data. For example, if the user provided Europe as the continent, the list of countries would be as below:\n",
    "\n",
    "```python\n",
    "{'',\n",
    " 'Albania',\n",
    " 'Andorra',\n",
    " 'Austria',\n",
    " 'Belarus',\n",
    " 'Belgium',\n",
    " 'Bosnia and Herzegovina',\n",
    " 'Bulgaria',\n",
    " 'Croatia',\n",
    " 'Cyprus',\n",
    " 'Czechia',\n",
    " 'Denmark',\n",
    " ...,\n",
    " ...,\n",
    " ...,\n",
    " 'Russia',\n",
    " 'San Marino',\n",
    " 'Serbia',\n",
    " 'Slovakia',\n",
    " 'Slovenia',\n",
    " 'Spain',\n",
    " 'Svalbard and Jan Mayen',\n",
    " 'Sweden',\n",
    " 'Switzerland',\n",
    " 'Ukraine',\n",
    " 'United Kingdom',\n",
    " 'Vatican City',\n",
    " 'Åland'\n",
    "}\n",
    "```\n",
    "\n",
    "Ask the user to choose one of these countries. If they provide a valid input (one of the countries in this list) proceed to step 3. In the case of invalid input, repeat this step and ask them to input a country again.\n",
    "\n",
    "3. Given a valid country name (an actual country in the ```country_name``` table), use the ```extract_subset``` functionality to further prune your data to obtain a even smaller set of rows where ```country_name == user input for country```. Print the names of cities in this filtered data. For example, if the user provided Netherlands as the country, the list of cities would be as below :\n",
    "\n",
    "```python\n",
    "{'',\n",
    " \"'s Gravenmoer\",\n",
    " \"'s-Gravenzande\",\n",
    " \"'s-Hertogenbosch\",\n",
    " \"'t Harde\",\n",
    " \"'t Kabel\",\n",
    " 'Aagtekerke',\n",
    " 'Aalburg',\n",
    " 'Aalsmeer',\n",
    " 'Aalst',\n",
    " 'Abbenbroek',\n",
    " 'Abbenes',\n",
    " 'Achterberg',\n",
    " 'Aduard',\n",
    " ...,\n",
    " ...,\n",
    " ...,\n",
    " 'Zuidoostbeemster',\n",
    " 'Zuidwolde',\n",
    " 'Zundert',\n",
    " 'Zutphen',\n",
    " 'Zwaag',\n",
    " 'Zwaagdijk-Oost',\n",
    " 'Zwaanshoek',\n",
    " 'Zwammerdam',\n",
    " 'Zwanenburg',\n",
    " 'Zwartewaal',\n",
    " 'Zwijndrecht',\n",
    " 'Zwolle',\n",
    " 's-Heerenberg'\n",
    "}\n",
    "```\n",
    "\n",
    "Ask the user to choose one of these cities. If they provide a valid input (one of the cities in this list) proceed to step 4. In the case of invalid input, repeat this step and ask them to input a city again.\n",
    "\n",
    "4. Once a valid city has been provided, display its row to the user. For example, if the user chose ```Amsterdam```, print the row for Amsterdam. Once this is done, end the search.\n",
    "\n",
    "```python\n",
    "City : Amsterdam\n",
    "[['2759794',\n",
    "  'EU',\n",
    "  'Europe',\n",
    "  'NL',\n",
    "  'Netherlands',\n",
    "  'NH',\n",
    "  'North Holland',\n",
    "  'Amsterdam',\n",
    "  '',\n",
    "  'Europe/Amsterdam']]\n",
    "```\n",
    "\n",
    "NOTE :\n",
    "\n",
    "1. For this implementation, it is mandatory to filter your data at each step. Simple search techniques are not admissible and may provide incorrect results. \n",
    "\n",
    "2. At each stage, keep asking the user to enter (and re-enter) the continent/country/city name till they provide a valid input. Once a valid input is received, move further.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exercise 3\n",
    "\n",
    "def search():\n",
    "    # define empy dictionary and continent_list\n",
    "    request = {}\n",
    "    continent_list = list(set([i[2] for i in data if i[2] != '']))\n",
    "    \n",
    "    # step 1\n",
    "    while True:\n",
    "        # ask for input & make it in title format\n",
    "        continent_name = input(\"Continent Name\").title()\n",
    "        \n",
    "        # step 2\n",
    "        if continent_name in continent_list:\n",
    "            # update request\n",
    "            request['continent_name'] = continent_name\n",
    "            # get country list and using set function to delete overlapped data\n",
    "            country_list = list(set([i[4] for i in extract_subset(data, request)]))\n",
    "            # sort in alphabetical order\n",
    "            country_list.sort()\n",
    "            # print country list\n",
    "            print(\"A List of countries in {}\".format(continent_name))\n",
    "            print(country_list)  \n",
    "            \n",
    "            # step 3\n",
    "            while True:\n",
    "                country_name = input(\"Country Name\").title()\n",
    "                \n",
    "                # check for validity\n",
    "                if country_name in country_list:\n",
    "                    # update request\n",
    "                    request['country_name'] = country_name\n",
    "                    # get city list and using set function to delete overlapped data\n",
    "                    city_list = list(set(i[7] for i in extract_subset(data, request)))\n",
    "                    # sort in alphabetical order\n",
    "                    city_list.sort()\n",
    "                    # print city list\n",
    "                    print(\"A List of cities in {}\".format(country_name))\n",
    "                    print(city_list) \n",
    "                    \n",
    "                    # step 4\n",
    "                    while True:\n",
    "                        # ask for city name & make it in title format\n",
    "                        city_name = input(\"City Name\").title()\n",
    "                        # check for validity\n",
    "                        if city_name in city_list:\n",
    "                            # update request\n",
    "                            request['city_name'] = city_name\n",
    "                            # print city\n",
    "                            print(\"City : {}\".format(city_name))\n",
    "                            print(extract_subset(data, request))\n",
    "                            return\n",
    "                        \n",
    "                        # ask again if answer is not valid\n",
    "                        else:\n",
    "                            continue\n",
    "                            \n",
    "                # ask again if answer is not valid\n",
    "                else:\n",
    "                    continue\n",
    "                    \n",
    "        # ask again if answer is not valid\n",
    "        else:\n",
    "            continue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Continent Nameeurope\n",
      "A List of countries in Europe\n",
      "['', 'Albania', 'Andorra', 'Austria', 'Belarus', 'Belgium', 'Bosnia and Herzegovina', 'Bulgaria', 'Croatia', 'Cyprus', 'Czechia', 'Denmark', 'Estonia', 'Faroe Islands', 'Finland', 'France', 'Germany', 'Gibraltar', 'Greece', 'Guernsey', 'Hungary', 'Iceland', 'Ireland', 'Isle of Man', 'Italy', 'Jersey', 'Kosovo', 'Latvia', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Macedonia', 'Malta', 'Moldova', 'Monaco', 'Montenegro', 'Netherlands', 'Norway', 'Poland', 'Portugal', 'Romania', 'Russia', 'San Marino', 'Serbia', 'Slovakia', 'Slovenia', 'Spain', 'Svalbard and Jan Mayen', 'Sweden', 'Switzerland', 'Ukraine', 'United Kingdom', 'Vatican City', 'Åland']\n",
      "Country Namenetherland\n",
      "Country Namenetherlands\n",
      "A List of cities in Netherlands\n",
      "['', \"'s Gravenmoer\", \"'s-Gravenzande\", \"'s-Hertogenbosch\", \"'t Harde\", \"'t Kabel\", 'Aagtekerke', 'Aalburg', 'Aalsmeer', 'Aalst', 'Abbenbroek', 'Abbenes', 'Achterberg', 'Aduard', 'Aerdt', 'Afferden', 'Akersloot', 'Akkrum', 'Albergen', 'Alblasserdam', 'Alde Leie', 'Aldeboarn', 'Alkmaar', 'Almelo', 'Almere', 'Almere Haven', 'Almkerk', 'Alphen', 'Alphen aan den Rijn', 'Alteveer', 'Amerongen', 'Amersfoort', 'Amstelveen', 'Amstenrade', 'Amsterdam', 'Andelst', 'Anjum', 'Anloo', 'Anna Paulowna', 'Annen', 'Apeldoorn', 'Appelscha', 'Appingedam', 'Arcen', 'Arkel', 'Arnhem', 'Arum', 'Asperen', 'Assen', 'Assendelft', 'Asten', 'Baarle-Nassau', 'Baarlo', 'Baarn', 'Baars', 'Bad Nieuweschans', 'Badhoevedorp', 'Baken', 'Bakhuizen', 'Balk', 'Ballum', 'Barendrecht', 'Barneveld', 'Bedum', 'Beek', 'Beets', 'Beetsterzwaag', 'Beilen', 'Belfeld', 'Bellingwolde', 'Bemelen', 'Bemmel', 'Bennekom', 'Benthuizen', 'Berg', 'Bergeijk', 'Bergen', 'Bergen op Zoom', 'Berghem', 'Bergschenhoek', 'Berkel', 'Beuningen', 'Beverwijk', 'Biddinghuizen', 'Biervliet', 'Bilthoven', 'Bitgum', 'Bladel', 'Blaricum', 'Blerick', 'Bleskensgraaf', 'Blitterswijck', 'Bloemendaal', 'Bocholtz', 'Bodegraven', 'Boesingheliede', 'Bolsward', 'Borculo', 'Borger', 'Born', 'Bosch en Duin', 'Boskoop', 'Bourtange', 'Boven-Hardinxveld', 'Boxmeer', 'Boxtel', 'Brakel', 'Breda', 'Breezand', 'Breskens', 'Breukelen', 'Broek op Langedijk', 'Broekhin', 'Broekhuizen', 'Broeksterwald', 'Bronnegerveen', 'Brummen', 'Brunssum', 'Budel-Schoot', 'Buitenkaag', 'Buitenpost', 'Bunschoten', 'Buren', 'Burgum', 'Burum', 'Bussum', 'Buurse', 'Cadier en Keer', 'Cadzand', 'Callantsoog', 'Capelle aan den IJssel', 'Castricum', 'Centrum', 'Chaam', 'Coevorden', 'Cothen', 'Cruquius', 'Cuijk', 'Culemborg', 'Dalfsen', 'Damwald', 'De Bilt', 'De Cocksdorp', 'De Goorn', 'De Hoef', 'De Horst', 'De Klomp', 'De Koog', 'De Kwakel', 'De Lier', 'De Meern', 'De Punt', 'De Steeg', 'De Valk', 'De Vecht', 'De Westereen', 'De Wijk', 'Delft', 'Delfzijl', 'Den Andel', 'Den Burg', 'Den Deijl', 'Den Dolder', 'Den Helder', 'Den Hoorn', 'Denekamp', 'Deurne', 'Deurningen', 'Deventer', 'Diemen', 'Dieren', 'Diever', 'Dijk', 'Dinther', 'Doenrade', 'Doetinchem', 'Dokkum', 'Domburg', 'Dommelen', 'Dongen', 'Doorwerth', 'Dordrecht', 'Dorp', 'Drachten', 'Drempt', 'Driebergen', 'Driel', 'Drogeham', 'Dronryp', 'Dronten', 'Drunen', 'Druten', 'Duin', 'Duiven', 'Duivendrecht', 'Dwingeloo', 'Echt', 'Eckart', 'Edam', 'Ede', 'Eede', 'Eefde', 'Eelde-Paterswolde', 'Eemdijk', 'Eerbeek', 'Eersel', 'Egmond aan Zee', 'Eibergen', 'Eindhoven', 'Einighausen', 'Elburg', 'Ellecom', 'Elsendorp', 'Elsloo', 'Elst', 'Emmeloord', 'Emmen', 'Enkhuizen', 'Enschede', 'Enschot', 'Enter', 'Epe', 'Epen', 'Erica', 'Ermelo', 'Essen', 'Etten', 'Exloo', 'Ezinge', 'Feanwalden', 'Ferwert', 'Fluitenberg', 'Flushing', 'Foxhol', 'Franeker', 'Frederiksoord', 'Gaanderen', 'Garderen', 'Garrelsweer', 'Garsthuizen', 'Gasselte', 'Geesteren', 'Geffen', 'Geldermalsen', 'Geldrop', 'Geleen', 'Gemert', 'Gendt', 'Giesbeek', 'Giessendam', 'Gieten', 'Giethoorn', 'Gilze', 'Goes', 'Goirle', 'Goor', 'Gorinchem', 'Gorredijk', 'Gorssel', 'Gouda', 'Goutum', 'Grathem', 'Greup', 'Grijpskerk', 'Groeningen', 'Groenlo', 'Groesbeek', 'Groet', 'Groningen', 'Gronsveld', 'Groot-Agelo', 'Grootebroek', 'Grootegast', 'Grou', 'Gulpen', 'Gytsjerk', 'Haaksbergen', 'Haamstede', 'Haarle', 'Haarlem', 'Haarlemmerliede', 'Haelen', 'Halfweg', 'Halle', 'Halsteren', 'Hank', 'Hapert', 'Haps', 'Hardenberg', 'Harderwijk', 'Haren', 'Harlingen', 'Harmelen', 'Hattem', 'Hazerswoude-Dorp', 'Hedel', 'Heemskerk', 'Heemstede', 'Heerenveen', 'Heerhugowaard', 'Heerjansdam', 'Heerlen', 'Heesch', 'Heeswijk', 'Heikant', 'Heiligerlee', 'Heiloo', 'Heino', 'Hekendorp', 'Helden', 'Helenaveen', 'Hellendoorn', 'Hellevoetsluis', 'Helmond', 'Hengelo', 'Hennaard', 'Heusden', 'Heythuysen', 'Hillegom', 'Hilvarenbeek', 'Hilversum', 'Hoedekenskerke', 'Hoek', 'Hoek van Holland', 'Hoensbroek', 'Hoeven', 'Hoge Donk', 'Hollandscheveld', 'Holten', 'Holtum', 'Holwierde', 'Honselersdijk', 'Hoofddorp', 'Hoofdplaat', 'Hoogeloon', 'Hoogerheide', 'Hoogersmilde', 'Hoogeveen', 'Hoogezand', 'Hoogland', 'Hooglanderveen', 'Hoogvliet', 'Hoogwoud', 'Hoorn', 'Horn', 'Hout', 'Houtakker', 'Houten', 'Houthem', 'Huissen', 'Huizen', 'Hulshorst', 'Hulst', 'Hummelo', 'Hurdegaryp', 'IJmuiden', 'IJsselmuiden', 'IJsselstein', 'Ingelum', 'Itens', 'Jaarsveld', 'Joure', 'Jubbega', 'Julianadorp', 'Jutrijp', 'Kaag', 'Kaatsheuvel', 'Kamerik', 'Kampen', 'Kats', 'Katwijk', 'Katwijk aan Zee', 'Keijenborg', 'Kekerdom', 'Keldonk', 'Kerkdriel', 'Kerkrade', 'Kessel', 'Kesteren', 'Klazienaveen', 'Kloetinge', 'Kloosterzande', 'Klundert', 'Kockengen', 'Kollum', 'Kollumerpomp', 'Koog aan de Zaan', 'Kortgene', 'Koudekerk aan den Rijn', 'Koudum', 'Krabbendijke', 'Krimpen aan de Lek', 'Krimpen aan den IJssel', 'Krispijn', 'Krommenie', 'Kruiningen', 'Kudelstaart', 'Kwadendamme', 'Langedijk', 'Langeraar', 'Langerak', 'Laren', 'Leek', 'Leende', 'Leersum', 'Leeuwarden', 'Legemeer', 'Leiden', 'Leiderdorp', 'Leidschendam', 'Leimuiden', 'Lekkerkerk', 'Lelystad', 'Lemelerveld', 'Lemiers', 'Leuth', 'Lichtenvoorde', 'Liempde', 'Lienden', 'Lies', 'Lievelde', 'Lijnden', 'Limmel', 'Lisse', 'Lochem', 'Loenen', 'Loosdrecht', 'Lopik', 'Loppersum', 'Losser', 'Lunteren', 'Maarssen', 'Maarssenbroek', 'Maartensdijk', 'Maasbracht', 'Maasdam', 'Maasdijk', 'Maasland', 'Maassluis', 'Maastricht', 'Makkum', 'Marknesse', 'Marsum', 'Mechelen', 'Medemblik', 'Meer', 'Meerlo', 'Meerssen', 'Meijel', 'Menaam', 'Meppel', 'Middelbeers', 'Middelburg', 'Middenmeer', 'Mierlo', 'Mijdrecht', 'Mijnheerkens', 'Mill', 'Millingen', 'Moergestel', 'Molenhoek', 'Monnickendam', 'Monster', 'Montfoort', 'Mook', 'Mortel', 'Muiden', 'Muiderberg', 'Musselkanaal', 'Naaldwijk', 'Naarden', 'Nagele', 'Nederhorst den Berg', 'Nederlangbroek', 'Nederweert', 'Neer', 'Neer-Andel', 'Neeritter', 'Nes', 'Netersel', 'Nieuw-Vennep', 'Nieuwdorp', 'Nieuwe-Niedorp', 'Nieuwegein', 'Nieuwehorne', 'Nieuwendijk', 'Nieuwerkerk', 'Nieuwerkerk aan den IJssel', 'Nieuwkoop', 'Nieuwkuijk', 'Nieuwleusen', 'Nieuwolda', 'Nieuwpoort', 'Nieuwveen', 'Nij Beets', 'Nijkerk', 'Nijmegen', 'Nijnsel', 'Nijverdal', 'Nisse', 'Noardburgum', 'Noordhorn', 'Noordscheschut', 'Noordwelle', 'Noordwijk-Binnen', 'Nootdorp', 'Norg', 'Nuenen', 'Nuland', 'Numansdorp', 'Nunspeet', 'Obdam', 'Ochten', 'Odiliapeel', 'Oeffelt', 'Ohe', 'Oirschot', 'Oisterwijk', 'Oldebroek', 'Oldenzaal', 'Ommen', 'Ooij', 'Oost-Knollendam', 'Oost-Souburg', 'Oostburg', 'Oostendam', 'Oosterbeek', 'Oosterhesselen', 'Oosterhout', 'Oosterwijk', 'Oosterzee', 'Oostvoorne', 'Oostwold', 'Oostzaan', 'Ootmarsum', 'Op den Bosch', 'Opeinde', 'Opheusden', 'Oranje', 'Oranjeoord', 'Oranjewoud', 'Oss', 'Ossendrecht', 'Otterlo', 'Oud-Beijerland', 'Oud-Gastel', 'Ouddorp', 'Oude Meer', 'Oude Pekela', 'Oude-Tonge', 'Oudega', 'Oudelande', 'Oudemirdum', 'Oudemolen', 'Oudenbosch', 'Oudenhoorn', 'Ouderkerk aan de Amstel', 'Oudewater', 'Oudwoude', 'Ouwster-Nijega', 'Overasselt', 'Overberg', 'Overveen', 'Paal', 'Palemig', 'Pannerden', 'Panningen', 'Papendrecht', 'Papenhoven', 'Parrega', 'Paterswolde', 'Petten', 'Philippine', 'Pieterburen', 'Pijnacker', 'Poortugaal', 'Poortvliet', 'Posterholt', 'Princenhof', 'Purmerend', 'Puth', 'Putte', 'Putten', 'Raalte', 'Raamsdonksveer', 'Ransdaal', 'Ravenstein', 'Renesse', 'Renkum', 'Ressen', 'Retranchement', 'Reusel', 'Reuver', 'Rhenen', 'Rhoon', 'Ridderkerk', 'Riel', 'Rietveld', 'Rijckholt', 'Rijen', 'Rijnsburg', 'Rijsbergen', 'Rijsenhout', 'Rijssen', 'Rijswijk', 'Rinsumageast', 'Rixtel', 'Rockanje', 'Roden', 'Rodenrijs', 'Roelofarendsveen', 'Roermond', 'Roodeschool', 'Roosendaal', 'Rooth', 'Rosmalen', 'Rossum', 'Rotterdam', 'Rottum', 'Rozenburg', 'Rozendaal', 'Ruurlo', 'Saasveld', 'Santpoort-Noord', 'Santpoort-Zuid', 'Sappemeer', 'Sassenheim', 'Schagen', 'Schaijk', 'Schalkhaar', 'Scharendijke', 'Scharnegoutum', 'Scherpenzeel', 'Schiedam', 'Schiermonnikoog', 'Schijndel', 'Schildwolde', 'Schin op Geul', 'Schinnen', 'Schipborg', 'Schipluiden', 'Schoonebeek', 'Schoonhoven', 'Schoorl', 'Sellingen', 'Sexbierum', 'Silvolde', 'Simpelveld', 'Sint Agatha', 'Sint Anthonis', 'Sint Hubert', 'Sint Maarten', 'Sint Nicolaasga', 'Sint Pancras', 'Sint Willebrord', 'Sint-Michielsgestel', 'Sittard', 'Slagharen', 'Sleen', 'Sleeuwijk', 'Slenaken', 'Sliedrecht', 'Sloterdijk', 'Sluis', 'Sluiskil', 'Sneek', 'Soerendonk', 'Soest', 'Soesterberg', 'Someren', 'Sommelsdijk', 'Son en Breugel', 'Spaarndam', 'Spakenburg', 'Spanbroek', 'Spaubeek', 'Spijk', 'Spijkenisse', 'Sprang', 'Stadskanaal', 'Stampersgat', 'Staphorst', 'Stedum', 'Steenbergen', 'Steenderen', 'Steenwijk', 'Steenwijkerwold', 'Steijl', 'Stein', 'Stellendam', 'Stevensweert', 'Stiphout', 'Stompetoren', 'Strand', 'Stroe', 'Sumar', 'Surhuisterveen', 'Susteren', 'Swalmen', 'Swifterbant', 'Swolgen', 'Taarlo', 'Ten Boer', 'Ter Apel', 'Terblijt', 'Terneuzen', 'Terschuur', 'Teteringen', 'The Hague', 'Tholen', 'Tiel', 'Tilburg', 'Tolkamer', 'Tubbergen', 'Tull', 'Tweede Exloermond', 'Twello', 'Tytsjerk', 'Ubbergen', 'Uden', 'Udenhout', 'Ugchelen', 'Uithoorn', 'Uithuizen', 'Ulicoten', 'Ulvenhout', 'Ureterp', 'Urmond', 'Utrecht', 'Vaals', 'Valkenburg', 'Valkenswaard', 'Valthermond', 'Veen', 'Veendam', 'Veenendaal', 'Veenhuizen', 'Veere', 'Veghel', 'Velden', 'Veldhoven', 'Velp', 'Velsen', 'Velsen-Noord', 'Ven-Zelderheide', 'Venhuizen', 'Venlo', 'Venray', 'Vianen', 'Vierhouten', 'Vierlingsbeek', 'Vijfhuizen', 'Vilt', 'Vinkel', 'Vinkeveen', 'Vlaardingen', 'Vledder', 'Vleuten', 'Vlieland', 'Vlodrop', 'Vogelenzang', 'Volendam', 'Voorburg', 'Voorhout', 'Voorschoten', 'Voorst', 'Vorden', 'Vriezenveen', 'Vroomshoop', 'Vrouwenpolder', 'Vught', 'Waalre', 'Waalwijk', 'Waatskamperheide', 'Waddinxveen', 'Wagenborgen', 'Wageningen', 'Walterswald', 'Wamel', 'Wanroij', 'Warder', 'Warffum', 'Warnsveld', 'Waspik', 'Wassenaar', 'Wateringen', 'Waterland', 'Waverveen', 'Weert', 'Well', 'Wellerlooi', 'Wemeldinge', 'Werkhoven', 'Wervershoof', 'Westdorpe', 'Westerbeek', 'Westerblokker', 'Westerbork', 'Westerhaar-Vriezenveensewijk', 'Westkapelle', 'Westwoud', 'Westzaan', 'Wezep', 'Wielse Hoeven', 'Wierden', 'Wieringerwerf', 'Wierum', 'Wijchen', 'Wijckel', 'Wijdewormer', 'Wijhe', 'Wildervank', 'Willemsoord', 'Willemstad', 'Winschoten', 'Winssen', 'Winsum', 'Winterswijk', 'Witharen', 'Witte Paarden', 'Wittem', 'Witteveen', 'Woerden', 'Wognum', 'Wolfheze', 'Wolphaartsdijk', 'Wolvega', 'Workum', 'Wormer', 'Wormerveer', 'Woudenberg', 'Woudsend', 'Wouw', 'Wouwsche Plantage', 'Zaandam', 'Zaandijk', 'Zaanstad', 'Zalk', 'Zaltbommel', 'Zandeweer', 'Zandvoort', 'Zeeland', 'Zeewolde', 'Zegge', 'Zeist', 'Zetten', 'Zevenaar', 'Zevenbergen', 'Zevenhoven', 'Zevenhuizen', 'Zierikzee', 'Zoetermeer', 'Zonnemaire', 'Zorgvlied', 'Zoutelande', 'Zuidbroek', 'Zuiderpark', 'Zuidhorn', 'Zuidland', 'Zuidoostbeemster', 'Zuidwolde', 'Zundert', 'Zutphen', 'Zwaag', 'Zwaagdijk-Oost', 'Zwaanshoek', 'Zwammerdam', 'Zwanenburg', 'Zwartewaal', 'Zwijndrecht', 'Zwolle', 's-Heerenberg']\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "City Nameamsterdam\n",
      "City : Amsterdam\n",
      "[['2759794', 'EU', 'Europe', 'NL', 'Netherlands', 'NH', 'North Holland', 'Amsterdam', '', 'Europe/Amsterdam']]\n"
     ]
    }
   ],
   "source": [
    "search()"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Final_DSA_Assignment_III_a.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
